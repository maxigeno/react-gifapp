{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GitGridItem.js","components/GifGrid.js","hocks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gits","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAmBhD,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAGEJ,EAAWK,KAAKC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAjBhB,SAACP,GAEzBF,EAAcE,EAAEQ,OAAOF,a,+BCVdG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEfC,EAFe,iDAEiCC,UACpDH,GAHmB,+DAKHI,MAAMF,GALH,cAKfG,EALe,gBAOEA,EAAIC,OAPN,uBAObC,EAPa,EAObA,KAGFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAdhB,kBAiBdM,GAjBc,4CAAH,sDCYLO,EAXK,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAG7B,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QC4BKO,EA7BC,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECJR,SAAEA,GAAc,IAAD,EAEfd,mBAAS,CACjCqB,KAAO,GACPa,SAAU,IAJ6B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAiBzC,OAXAC,qBAAU,WAERxB,EAAQC,GACLwB,MAAM,SAACC,GACNH,EAAS,CACPf,KAAOkB,EACPL,SAAU,SAGf,CAAEpB,IAEEqB,EDX2BK,CAAc1B,GAAlCa,EAFoB,EAE1BN,KAAca,EAFY,EAEZA,QAEtB,OACE,qCACE,qBAAIJ,UAAU,oCAAd,UAAmDhB,EAAnD,OAECoB,GACC,mBAAGJ,UAAU,mCAAb,yBAGF,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEYNgB,EA3BM,WAAK,MAIYzC,mBAAU,CAAC,SAJvB,mBAIjB0C,EAJiB,KAIL3C,EAJK,KAMxB,OACE,qCACE,8CACA,cAAC,EAAD,CAAeA,cAAgBA,IAC/B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAACT,GAAD,OACd,cAAC,EAAD,CAGIA,SAAYA,GADLA,YChB3B6B,IAASC,OAEP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.66e9e61f.chunk.js","sourcesContent":["//snipper rafc\r\nimport React, { useState } from 'react' ;\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  //necesito un suestate (estado ), para saber cuando la perosona modifica y escribe\r\n  const [inputValue, setinputValue] = useState('');//paso string vacio xq sino me tira undefind el estado inicial\r\n\r\n  const handleInputChange = (e) => {\r\n    // le paso como nuevo estado el value del input\r\n    setinputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    //me aseguro que el inputvalue  no tenga espacios y que tenga mas de 2 caracteres para que no pueda guardar  cadenas vacias\r\n    if (inputValue.trim.length < 2) {\r\n      setCategories((cats) => [inputValue, ...cats]); //le agrego el valor nuevo que tiene input\r\n      setinputValue(\"\"); // y vuelve el input a cadena vacia\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  //digo que mi compo. tiene que recibir como porp una funcion que es requerida y se llama setcategory\r\n  setCategories: PropTypes.func.isRequired\r\n};\r\n\r\n\r\n","\r\nexport const getGifs = async ( category ) => {\r\n  //encodeURI me remplaza los espacios por simbolos en la url\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category)}&limit=10&api_key=7vZIMd9ZpW5EuSq99abRSr6lSsUVEMMs`;\r\n\r\n  const res = await fetch(url);\r\n  //desesctructura xq en el jsonn viene en datas los git para no poner data.data\r\n  const { data } = await res.json();\r\n  //console.log(\"data\",data) ;\r\n  //con un map recorro la data y creo un nuevo obj con solo los datos que me <interesan></interesan>\r\n  const gits = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_medium.url,\r\n    };\r\n  });\r\n  return gits ;\r\n};   ","import React from 'react'\r\n\r\nconst GifGridItem = ( { title, url }) => {\r\n\r\n  //console.log(id, title, url);\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hocks/useFetchGifs';\r\n//import React, { useEffect, useState } from 'react'\r\n\r\nimport GifGridItem from './GitGridItem';\r\n//import PropTypes from 'prop-types'\r\n\r\nconst GifGrid = ( { category } ) => {\r\n\r\n  const { data: images, loading } = useFetchGifs( category );\r\n  \r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category} </h3>\r\n\r\n      {loading && (\r\n        <p className=\"animate__animated animate__flash\">Cargando...</p>\r\n      )}\r\n\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem\r\n            key={img.id}\r\n            {...img}\r\n            //usando el string operator . mandamos el obj ya desestructurado, en este caso paso 3 propiedades .\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n/* GitGridd.propTypes = {\r\n\r\n} */\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n\r\n  const [state, setstate] = useState({\r\n    data : [],\r\n    loading : true\r\n  });\r\n  useEffect(() => {\r\n\r\n    getGifs(category)\r\n      .then( (imgs) =>{\r\n        setstate({\r\n          data : imgs,\r\n          loading : false\r\n        })\r\n      } );\r\n  }, [ category ]);\r\n\r\n  return state; //es el obj {data:[ , loading : <true></true>]}\r\n}","//SNIPPER PARA COMPONENTE COMPLETO RAFCP\r\n\r\nimport React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n\r\nconst GifExpertApp = () =>{\r\n\r\n  //const categories = [ 'Boca', 'River', 'Independiente' ];\r\n  //usestate nos da  una funcion para poder editar el array en este caso que react detecta cuando se llama la funcion para renderizar solo ese pedacito\r\n  const [categories, setCategories] = useState( [\"Boca\"] );\r\n\r\n  return(\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory   setCategories={ setCategories } />\r\n      <hr/>\r\n\r\n      <ol>\r\n            {\r\n              categories.map( (category)  => (\r\n                <GifGrid \r\n                    //el key que ponemos es para que react sepa que el estamos iterando\r\n                    key ={ category }\r\n                    category = {category}\r\n                  />\r\n              ))\r\n            }  \r\n        </ol>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\n\nReactDOM.render(\n  \n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}